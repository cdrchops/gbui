<!-- build configuration -->
<project name="jme-bui" default="compile" basedir=".">

  <property name="lib.name"    value="jme-bui"/>
  <property name="src.dir"     value="src/java"/>
  <property name="deploy.dir"  value="dist"/>
  <property name="dist.jar"    value="${lib.name}.jar"/>
  <property name="classes.dir" value="${deploy.dir}/classes"/>

  <!-- javadoc bits -->
  <property name="javadoc.dir"      value="${deploy.dir}/docs"/>
  <property name="savedoc.dir"      value="docs"/>
  <property name="doc.packages"     value="com.jme.bui.*"/>
  <property name="copyright.holder" value="Michael Bayne"/>

  <!-- import some targets to enumerate library dependencies -->
  <property name="libs.dir" value="lib"/>
  <import file="libs-incl.xml"/>

  <!-- declare our classpath -->
  <path id="classpath">
    <pathelement location="${classes.dir}"/>
    <fileset dir="${deploy.dir}/lib" includes="**/*.jar"/>
  </path>

  <!-- prepares the application directories -->
  <target name="prepare">
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${javadoc.dir}"/>
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${classes.dir}/rsrc"/>
    <!-- copy media and properties into the target directory -->
    <copy todir="${classes.dir}/rsrc">
      <fileset dir="rsrc" includes="**/*"/>
    </copy>
    <copy todir="${classes.dir}">
      <fileset dir="${src.dir}" includes="**/*.properties"/>
    </copy>
    <copy todir="${deploy.dir}/lib" flatten="true">
      <fileset refid="${lib.name}.libs"/>
    </copy>
  </target>

  <!-- cleans out the intermediate build files -->
  <target name="clean">
    <delete dir="${deploy.dir}/classes"/>
    <delete dir="${deploy.dir}/docs"/>
  </target>

  <!-- cleans out the built application -->
  <target name="distclean">
    <delete dir="${deploy.dir}"/>
  </target>

  <!-- build the java class files -->
  <target name="compile" depends="prepare">
    <mkdir dir="${deploy.dir}/lib"/>
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="on" deprecation="on" source="1.5">
      <classpath refid="classpath"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
    </javac>
    <!-- copy native libraries into dist/lib -->
    <copy todir="${deploy.dir}/lib">
      <fileset dir="lib/" includes="**/*.so"/>
      <fileset dir="lib/" includes="**/*.jnilib"/>
      <fileset dir="lib/" includes="**/*.dylib"/>
    </copy>
  </target>

  <!-- build the javadoc documentation -->
  <target name="javadoc" depends="prepare">
    <tstamp><format property="year" pattern="yyyy" /></tstamp>
    <javadoc windowtitle="BUI API" doctitle="BUI API"
             destdir="${javadoc.dir}" additionalparam="-breakiterator">
      <packageset dir="${src.dir}"/>
      <bottom>Copyright &#169; ${year} ${copyright.holder}.
              All Rights Reserved.</bottom>
      <classpath refid="classpath"/>
      <link href="http://java.sun.com/j2se/1.5/docs/api/"/>
      <link href="http://www.jmonkeyengine.com/doc/"/>
    </javadoc>
  </target>

  <!-- builds the javadocs and stuffs them in a directory where they -->
  <!-- won't be blown away when we do "clean" next time -->
  <target name="savedoc" depends="javadoc">
    <delete dir="${savedoc.dir}/api"/>
    <copy todir="${savedoc.dir}/api">
      <fileset dir="${javadoc.dir}" includes="**/*"/>
    </copy>
  </target>

  <!-- runs our unit tests -->
  <target name="tests" depends="compile" description="Runs unit tests.">
    <junit printsummary="no" haltonfailure="yes" fork="false">
      <classpath refid="classpath"/>
      <formatter type="brief" usefile="false"/>
      <batchtest>
        <fileset dir="${src.dir}">
          <include name="**/*UTest.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- builds our distribution files (war and jar) -->
  <target name="dist" depends="prepare,compile">
    <jar destfile="${deploy.dir}/${dist.jar}"
         basedir="${classes.dir}"/>
  </target>

  <target name="distsrc">
    <jar destfile="${deploy.dir}/jme-bui-src.jar"
         basedir="${src.dir}"/>
  </target>
</project>
